//
//  MessagesViewController.swift
//  morsenger MessagesExtension
//
//  Created by carlos lao on 6/6/24.
//

import UIKit
import Messages
import AVFoundation

let MORSE_ALPHABET: [String:String] = [
    ".-": "A",
    "-...": "B",
    "-.-.": "C",
    "-..": "D",
    ".": "E",
    "..-.": "F",
    "--.": "G",
    "....": "H",
    "..": "I",
    ".---": "J",
    "-.-": "K",
    ".-..": "L",
    "--": "M",
    "-.": "N",
    "---": "O",
    ".--.": "P",
    "--.-": "Q",
    ".-.": "R",
    "...": "S",
    "-": "T",
    "..-": "U",
    "...-": "V",
    ".--": "W",
    "-..-": "X",
    "-.--": "Y",
    "--..": "Z",
    ".----": "1",
    "..---": "2",
    "...--": "3",
    "....-": "4",
    ".....": "5",
    "-....": "6",
    "--...": "7",
    "---..": "8",
    "----.": "9",
    "-----": "0",
    ".-.-.-": ".",
    "..--..": "?",
    "-.-.--": "!"
]

class MessagesViewController: MSMessagesAppViewController {
    let defaults = UserDefaults.standard
    
    var DOT_DURATION: TimeInterval = 0
    var pressStartTime: Date?
    var pressEndTime: Date?
    var pressDuration: TimeInterval = 0
    var audioPlayer: AVAudioPlayer?
    var workItem: DispatchWorkItem?
    var message: [String] = []
    
    @IBOutlet weak var telegraphButton: UIButton!
    @IBOutlet weak var transcriptionLabel: UILabel!
    @IBOutlet weak var writeStepperLabel: UILabel!
    @IBOutlet weak var writeStepper: UIStepper!
    @IBOutlet weak var backspaceButton: UIButton!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupAudioPlayer()
        transcriptionLabel.text = " "
    }
    
    func setDotDuration(wpm: Double) {
        DOT_DURATION = (60/50) * (1/wpm)
    }
    
    func setupAudioPlayer() {
        if let soundURL = Bundle.main.url(forResource: "telegraph", withExtension: "wav") {
            do {
                audioPlayer = try AVAudioPlayer(contentsOf: soundURL)
                audioPlayer?.prepareToPlay()
                audioPlayer?.numberOfLoops = -1
            } catch {
                print("Error loading sound file: \(error)")
            }
        }
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        writeStepper.value = (defaults.double(forKey: "writeSpeed") == 0.0) ? 20 : defaults.double(forKey: "writeSpeed")
        setDotDuration(wpm: writeStepper.value)
        writeStepperLabel.text = "\(Int(writeStepper.value)) wpm"
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    @IBAction func buttonTouchDown() {
        pressStartTime = Date()
        audioPlayer?.play()
        workItem?.cancel()
    }
    
    @IBAction func buttonTouchUp() {
        if let startTime = pressStartTime {
            pressDuration = Date().timeIntervalSince(startTime)
            audioPlayer?.stop()
            audioPlayer?.currentTime = 0
            
            let label = transcriptionLabel.text ?? " "
            if pressDuration >= DOT_DURATION * 3 {
                transcriptionLabel.text = (label == " ") ? "-" : label + "-"
            } else {
                transcriptionLabel.text = (label == " ") ? "." : label + "."
            }
            
            workItem = DispatchWorkItem {
                self.endCurrCharacter()
            }
            DispatchQueue.main.asyncAfter(deadline: .now() + (DOT_DURATION * 2), execute: workItem!)
        }
    }
    
    func endCurrCharacter() {
        if let text = transcriptionLabel.text {
            message.append(MORSE_ALPHABET[text] ?? text)
            print(message)
        }
        transcriptionLabel.text = " "
    }
    
    @IBAction func writeStepperValueChanged(_ sender: UIStepper) {
        defaults.set(sender.value, forKey: "writeSpeed")
        setDotDuration(wpm: sender.value)
        writeStepperLabel.text = "\(Int(sender.value)) wpm"
    }
    
    @IBAction func backspace(_ sender: UIButton) {
        _ = message.popLast()
        print(message)
    }
}
